# This Dockerfile builds the API only.

# Use the official Python 3.11.4 alpine image from the Docker Hub
FROM python:3.11.4-alpine3.17

# Set the working directory to /app
WORKDIR /app

# Create a virtual environment
RUN python -m venv /app/venv

# Set the VIRTUAL_ENV and PATH environment variables
# to use the virtual environment
ENV VIRTUAL_ENV=/app/venv
ENV PATH="/app/venv/bin:$PATH"

# Set the FLASK_ENV environment variable to production
ENV FLASK_ENV=production

# Install postgres libraries so that the pip install succeeds.
RUN apk update && \
    apk add python3 postgresql-libs && \
    apk add --virtual .build-deps gcc python3-dev musl-dev postgresql-dev

# Copy the requirements file into the container at /app
COPY api/requirements.txt /app/api/requirements.txt

# Install the Python dependencies
RUN pip install --upgrade pip && pip install -r /app/api/requirements.txt

# Remove the build dependencies
RUN apk --purge del .build-deps

# Copy the WSGI entry point script into the container at /app
COPY wsgi.py /app/wsgi.py

# Copy the rest of the application source code for optimal caching
COPY api /app/api

# Copy the .env file into the container at /app
COPY .env /app/.env

# Make port 5000 available to the world outside this container
EXPOSE 5000
